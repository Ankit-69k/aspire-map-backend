name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE_NAME: backend-service
  REGION: us-central1
  REPOSITORY: backend-repo

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client netcat-openbsd

      - name: Download and setup Cloud SQL Auth Proxy
        run: |
          echo "Downloading Cloud SQL Auth Proxy..."
          curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
          chmod +x cloud_sql_proxy
          echo "Cloud SQL Proxy downloaded successfully"

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Debug Cloud SQL Connection
        run: |
          echo "=== DEBUGGING CLOUD SQL CONNECTION ==="
          echo "Instance Connection Name: ${{ secrets.DB_INSTANCE_CONNECTION_NAME }}"
          echo "Database Name: ${{ secrets.DB_NAME }}"
          echo "Database User: ${{ secrets.DB_USER }}"
          echo "Project ID: ${{ secrets.GCP_PROJECT }}"

          # Verify Cloud SQL instance exists
          echo "Checking if Cloud SQL instance exists..."
          gcloud sql instances describe aspire-map-db --project=${{ secrets.GCP_PROJECT }} || {
            echo "❌ Cloud SQL instance not found or not accessible"
            exit 1
          }

          # Check if database exists
          echo "Checking if database exists..."
          gcloud sql databases list --instance=aspire-map-db --project=${{ secrets.GCP_PROJECT }} | grep "${{ secrets.DB_NAME }}" || {
            echo "❌ Database '${{ secrets.DB_NAME }}' not found"
            echo "Available databases:"
            gcloud sql databases list --instance=aspire-map-db --project=${{ secrets.GCP_PROJECT }}
            exit 1
          }

          # Check if user exists  
          echo "Checking if user exists..."
          gcloud sql users list --instance=aspire-map-db --project=${{ secrets.GCP_PROJECT }} | grep "${{ secrets.DB_USER }}" || {
            echo "❌ User '${{ secrets.DB_USER }}' not found"
            echo "Available users:"
            gcloud sql users list --instance=aspire-map-db --project=${{ secrets.GCP_PROJECT }}
            exit 1
          }

          echo "✅ All Cloud SQL resources verified"

      - name: Start Cloud SQL Auth Proxy
        run: |
          echo "Starting Cloud SQL Auth Proxy..."

          # Start proxy in background with detailed logging
          ./cloud_sql_proxy \
            -instances=${{ secrets.DB_INSTANCE_CONNECTION_NAME }}=tcp:5432 \
            -log_debug_stdout \
            -verbose &

          PROXY_PID=$!
          echo "PROXY_PID=$PROXY_PID" >> $GITHUB_ENV
          echo "Cloud SQL Proxy started with PID: $PROXY_PID"

          # Wait for proxy to be ready with better testing
          echo "Waiting for Cloud SQL Auth Proxy to be ready..."
          for i in {1..60}; do
            if nc -z localhost 5432 2>/dev/null; then
              echo "✅ Port 5432 is listening"
              
              # Test PostgreSQL readiness
              if pg_isready -h localhost -p 5432 -t 5 2>/dev/null; then
                echo "✅ PostgreSQL is ready at localhost:5432"
                break
              else
                echo "Port open but PostgreSQL not ready yet (attempt $i/60)..."
              fi
            else
              echo "Port 5432 not ready yet (attempt $i/60)..."
            fi
            
            if [ $i -eq 60 ]; then
              echo "❌ Cloud SQL Proxy failed to start within 120 seconds"
              echo "Proxy process status:"
              ps aux | grep cloud_sql_proxy | head -5
              echo "Network status:"
              netstat -tlnp | grep 5432 || true
              exit 1
            fi
            
            sleep 2
          done

      - name: Test Database Connection
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "=== TESTING DATABASE CONNECTION ==="

          # Test basic connection with psql
          echo "Testing psql connection..."
          psql -h localhost -p 5432 -U "${{ secrets.DB_USER }}" -d "${{ secrets.DB_NAME }}" -c "SELECT version();" || {
            echo "❌ psql connection failed"
            echo "Connection details:"
            echo "  Host: localhost"
            echo "  Port: 5432"
            echo "  User: ${{ secrets.DB_USER }}"
            echo "  Database: ${{ secrets.DB_NAME }}"
            exit 1
          }

          echo "✅ psql connection successful"

      - name: Run Prisma Migrations
        env:
          DATABASE_URL: 'postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ secrets.DB_NAME }}?sslmode=disable&connect_timeout=60'
        run: |
          echo "=== RUNNING PRISMA MIGRATIONS ==="

          # Test Prisma connection first
          echo "Testing Prisma connection..."
          npx prisma db execute --stdin <<< "SELECT 1 as connection_test;" || {
            echo "❌ Prisma connection test failed"
            echo "Trying alternative connection string..."
            
            # Try with minimal connection string
            export DATABASE_URL="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ secrets.DB_NAME }}?sslmode=disable"
            npx prisma db execute --stdin <<< "SELECT 1 as connection_test;" || {
              echo "❌ All Prisma connection attempts failed"
              exit 1
            }
          }

          echo "✅ Prisma connection successful"

          # Run migrations
          echo "Deploying Prisma migrations..."
          npx prisma migrate deploy || {
            echo "❌ Migration deployment failed"
            echo "Checking migration status..."
            npx prisma migrate status || true
            exit 1
          }

          echo "✅ Migrations deployed successfully"

      - name: Stop Cloud SQL Auth Proxy
        if: always()
        run: |
          if [ ! -z "$PROXY_PID" ]; then
            echo "Stopping Cloud SQL Proxy (PID: $PROXY_PID)..."
            kill $PROXY_PID 2>/dev/null || true
            sleep 2
          fi

          # Force kill any remaining proxy processes
          pkill -f cloud_sql_proxy 2>/dev/null || true

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-docker.pkg.dev

      - name: Build Docker Image
        run: |
          docker build -t us-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .

      - name: Push Docker Image
        run: |
          docker push us-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=us-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --port=8080 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NODE_ENV=production" \
            --set-secrets="DATABASE_URL=DATABASE_URL:latest,PINECONE_API_KEY=PINECONE_API_KEY:latest,GEMINI_API_KEY=GEMINI_API_KEY:latest"
