name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE_NAME: aspire-map-service
  REGION: us-central1
  REPOSITORY: aspire-map-repo

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Setup Cloud SQL Auth Proxy
        run: |
          curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy -instances=${{ secrets.DB_INSTANCE_CONNECTION_NAME }}=tcp:5432 &
          sleep 10

      - name: Run Prisma Migrations
        env:
          DATABASE_URL: 'postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ secrets.DB_NAME }}?sslmode=disable'
        run: npm run db:deploy

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker asia-south1-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          docker build -t asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/aspire-map-repo/backend-service:${{ github.sha }} .
          docker push asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/aspire-map-repo/backend-service:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy backend-service \
            --image=asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/aspire-map-repo/backend-service:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --port=8080 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NODE_ENV=production" \
            --set-secrets="DATABASE_URL=DATABASE_URL:latest,PINECONE_API_KEY=PINECONE_API_KEY:latest,GOOGLE_API_KEY=GOOGLE_API_KEY:latest"

      - name: Cleanup
        if: always()
        run: pkill -f cloud_sql_proxy || true
